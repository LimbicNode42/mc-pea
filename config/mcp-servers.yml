# MC-PEA MCP Server Configuration
# Configuration for integrating multiple MCP servers into the mc-pea ecosystem

mcpServers:
  # GitHub Integration - VERIFIED âœ…
  github:
    enabled: true
    status: "authenticated"
    capabilities:
      - repository_management
      - issue_tracking
      - pull_requests
      - notifications
      - code_scanning
      - releases
    useCase: "Central coordination hub for deployment tracking and issue management"
    priority: 1
    
  # Database Operations - NEXT TO TEST
  database:
    enabled: false
    status: "pending"
    servers:
      postgres:
        capabilities: ["sql_query", "table_management", "database_creation"]
        useCase: "User data, service configurations, audit logs"
      redis:
        capabilities: ["key_value", "caching", "session_management"]
        useCase: "Session storage, caching, inter-service messaging"
      mongodb:
        capabilities: ["document_storage", "aggregation", "indexing"]
        useCase: "Event logs, analytics data, flexible schemas"
    priority: 2

  # Development Workflow - HIGH VALUE
  vscode:
    enabled: false
    status: "pending"
    capabilities:
      - file_operations
      - task_execution
      - extension_management
      - debugging
    useCase: "Automated development workflows and code generation"
    priority: 3

  # Container Management - DOCKER-FREE ALTERNATIVE
  docker:
    enabled: false
    status: "not_planned"
    reason: "Focusing on Docker-free development workflow"
    alternative: "Native Node.js processes with PM2 or systemd"

  # File System Integration - WINDOWS OPTIMIZATION
  everything_search:
    enabled: false
    status: "pending"
    capabilities:
      - instant_file_search
      - content_indexing
      - real_time_monitoring
    useCase: "Fast service discovery and configuration file management"
    platform: "Windows"
    priority: 4

# Integration Strategy
orchestration:
  coordinator: "github"
  workflow:
    1: "GitHub issues track service deployments"
    2: "Database MCP handles data operations"
    3: "VSCode MCP automates development tasks"
    4: "Everything Search enables fast service discovery"

# Service Communication Patterns
communication:
  central_hub: "github_issues"
  data_layer: "database_mcp"
  development: "vscode_mcp"
  discovery: "everything_search_mcp"

# Example Workflow
example_deployment:
  1: "Create GitHub issue for new service deployment"
  2: "Use Database MCP to set up required tables/schemas"
  3: "VSCode MCP automates code scaffolding"
  4: "Update GitHub issue with deployment progress"
  5: "Everything Search indexes new service files"
  6: "GitHub notifications alert team of completion"

# Testing Plan
testing_priority:
  1: "âœ… GitHub MCP - COMPLETED"
  2: "ðŸ”„ Database MCP (PostgreSQL, Redis, MongoDB)"
  3: "ðŸ”„ VSCode MCP"
  4: "ðŸ”„ Everything Search MCP"

# Configuration Files
config_locations:
  github_token: "Environment variable: GITHUB_TOKEN"
  database_connections: "config/database.json"
  vscode_settings: ".vscode/settings.json"
  everything_search: "Windows registry or config file"

# Performance Considerations
performance:
  github_api_limits: "5000 requests/hour (authenticated)"
  database_connections: "Pool management recommended"
  file_search: "Index size depends on project size"
  memory_usage: "Monitor Node.js heap for multiple MCP connections"

# Security Notes
security:
  github_token: "Use fine-grained personal access tokens"
  database_credentials: "Store in encrypted environment variables"
  local_access: "VSCode and Everything Search run locally"
  network_exposure: "Only GitHub MCP requires external network access"
