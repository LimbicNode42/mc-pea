api_link_discovery:
  description: >
    Comprehensively scrape text and links from the sidebar/menu of {website_url} including links hidden behind interaction elements like accordions and create a COMPLETE hierarchical sitemap of ALL discoveries. You MUST find EVERY single link in the sidebar/menu and categorize them based on their parent links. CRITICAL REQUIREMENT: Extract ONLY PATH-ONLY links (e.g., "/en/rest/actions/artifacts") NOT full URLs (e.g., "https://docs.github.com/en/rest/actions/artifacts"). This path-only format is essential for token optimization.
  expected_output: >
    An exhaustive structured list with ALL PATH-ONLY links (not full URLs), complete categories, hierarchical relationships, and comprehensive metadata. Output should include 100% of the links found in the sidebar/menu in path-only format (starting with "/" and excluding the domain). Links must be in format "/path/to/resource" not "https://domain.com/path/to/resource" for token efficiency.
  agent: >
    ApiLinkDiscoveryAgent
  async_execution: True
  # The following are for test purposes
  markdown: False
  output_file: api_link_discovery_output.json

api_link_content_extractor:
  description: >
    Comprehensively process the below json by combining the `l` fields with {hostname} to form a full URL and extract comprehensive API endpoint usage information from EVERY page. Generate detailed structured data for ALL endpoints including paths, methods, parameters/headers (differentiating required and optional), expected outputs/return values, authentication requirements, rate limits, examples, and practical usage patterns. Cover the entire API surface systematically without stopping until all endpoints are documented.

    {context_output}
  expected_output: >
    A comprehensive, detailed dataset of ALL API endpoint information covering complete paths, methods, parameters, authentication, responses, examples, and usage patterns. Generate extensive structured output with maximum detail for each endpoint. Include comprehensive metadata, cross-references, implementation guidance, and thorough documentation that serves as a complete API reference. Output should be verbose and exhaustive, covering every aspect of API usage discovered across all provided URLs.
  agent: >
    ApiLinkContentExtractorAgent
  async_execution: False
  context: >
    api_link_discovery
  # The following are for test purposes
  # markdown: True
  output_file: api_link_content_extractor_output.json
