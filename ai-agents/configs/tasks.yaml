api_link_discovery:
  description: >
    Comprehensively scrape text and links from the sidebar/menu of {website_url} including links hidden behind interaction elements like accordions and create a COMPLETE hierarchical sitemap of ALL discoveries. You MUST find EVERY single link in the sidebar/menu and categorize them based on their parent links. CRITICAL REQUIREMENT: Extract ONLY PATH-ONLY links (e.g., "/en/rest/actions/artifacts") NOT full URLs (e.g., "https://docs.github.com/en/rest/actions/artifacts"). This path-only format is essential for token optimization.
  expected_output: >
    An exhaustive structured list with ALL PATH-ONLY links (not full URLs), complete categories, hierarchical relationships, and comprehensive metadata. Output should include 100% of the links found in the sidebar/menu in path-only format (starting with "/" and excluding the domain). Links must be in format "/path/to/resource" not "https://domain.com/path/to/resource" for token efficiency.
  agent: >
    ApiLinkDiscoveryAgent
  async_execution: True
  # The following are for test purposes
  markdown: False
  # output_file: api_link_discovery_output.json

api_content_extraction:
  description: >
    Parse each URL from the below input JSON and extract API endpoint details. For each URL, identify:
    1. HTTP methods (GET, POST, PUT, DELETE, etc.)
    2. API paths/endpoints
    3. Parameters (path, query, body, headers)
    4. Authentication requirements
    5. Response codes and formats

    Input: {chunk}
    
    Output structured JSON matching the ApiLinkContentExtractorOutput schema.
  expected_output: >
    Valid JSON with structure: {"ocs": [{"cn": "category_name", "cd": "category_desc", "ces": [{"en": "endpoint_name", "ed": "description", "em": "HTTP_METHOD", "ep": "/api/path", "eh": [], "epp": [], "eqp": [], "ebp": [], "erc": {}, "ere": {}}]}]}. Include all discovered endpoints with complete parameter details.
  agent: >
    ApiLinkContentExtractorAgent
  async_execution: False
  context: >
    api_orchestrator
  # The following are for test purposes
  markdown: False
  # output_file: api_link_content_extractor_output.json

mcp_base_generation:
  description: >
    Generate a base MCP server structure for API integration with {website_url}.

    Your task is to:
    1. Copy the MCP server template structure to create a new server
    2. Customize package.json with server-specific information  
    3. Customize README.md with API and server details
    4. Customize the main server TypeScript file with basic configuration
    5. Validate that the generated structure is complete and follows standards

    Context:
    - Website URL: {website_url}
    - Server Name: {server_name}
    - Template Path: {template_path}

    Requirements:
    - Follow MC-PEA project standards for MCP server development
    - Use MCP SDK stdio transport patterns
    - Ensure proper TypeScript configuration
    - Create a solid foundation that can be extended with API-specific tools and resources
    - Validate the structure meets quality standards

    Expected Output:
    Provide a JSON response with the following structure:
    {{
        "success": true,
        "server_name": "generated-server-name",
        "output_directory": "/path/to/generated/server",
        "template_used": "/path/to/template",
        "files_created": ["list", "of", "files"],
        "customizations_applied": {{
            "package_json": "details",
            "readme": "details", 
            "server_file": "details"
        }},
        "validation_results": {{
            "structure_valid": true,
            "required_files_present": true,
            "warnings": []
        }},
        "next_steps": ["instructions", "for", "api", "integration"]
    }}
  expected_output: >
    JSON response containing:
    - success: boolean indicating if generation was successful
    - server_name: the name of the generated server
    - output_directory: path to the generated server
    - template_used: path to the template that was used
    - files_created: list of files that were created/customized
    - customizations_applied: details of customizations made
    - validation_results: validation status and any warnings
    - next_steps: guidance for integrating API-specific functionality
  agent: >
    MCPBaseGeneratorAgent
  async_execution: False
  # context: api_orchestrator
  # The following are for test purposes
  markdown: False
  # output_file: mcp_base_generator_output.json

mcp_api_integration:
  description: >
    Integrate extracted API usage details into the generated MCP server by analyzing
    the API extraction results and updating the server structure with appropriate
    tools and resources. This task automatically processes API documentation,
    endpoint analysis, and authentication details to generate functional MCP
    components that can interact with the target API.
  expected_output: >
    Comprehensive MCP server integration results containing:
    - integration_summary: overview of changes made to the server
    - tools_generated: list of MCP tools created for API endpoints
    - resources_generated: list of MCP resources for API data access
    - server_structure_updates: details of files modified/created
    - authentication_integration: how API auth was incorporated
    - validation_results: compliance checks and testing results
    - usage_examples: sample code demonstrating tool/resource usage
    - documentation_updates: README and API documentation changes
  agent: >
    MCPAPIIntegratorAgent
  async_execution: False
  # context: api_orchestrator
  markdown: False
  # output_file: mcp_api_integration_output.json
