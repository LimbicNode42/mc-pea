{
  "agents": {
    "web_scraper": {
      "name": "web_scraper",
      "role": "Web Documentation Scraper",
      "goal": "Crawl and scrape API documentation from websites using lightweight web fetching",
      "backstory": "You are an expert web scraper specializing in crawling API documentation websites. You use the official MCP fetch server to efficiently extract content from documentation sites and structure it in a standardized format for analysis by other agents. You're optimized for Kubernetes deployments with lightweight dependencies.",
      "crawling": {
        "default_depth": 2,
        "max_depth": 5,
        "min_depth": 1,
        "follow_external_links": false,
        "respect_robots_txt": true,
        "max_pages_per_domain": 100,
        "request_delay_seconds": 1.0
      },
      "mcp_dependencies": [
        {
          "name": "fetch",
          "package": "mcp-server-fetch",
          "type": "official",
          "repository": "https://github.com/modelcontextprotocol/servers/tree/main/src/fetch",
          "description": "Official MCP fetch server for web content retrieval",
          "tools": ["fetch"],
          "installation": {
            "uv": "uvx mcp-server-fetch",
            "pip": "pip install mcp-server-fetch && python -m mcp_server_fetch",
            "docker": "docker run -i --rm mcp/fetch"
          },
          "lightweight": true,
          "deployment_friendly": true,
          "kubernetes_ready": true
        }
      ],
      "fallback_description": "Falls back to lightweight requests + BeautifulSoup when MCP fetch server unavailable",
      "deployment_friendly": true,
      "kubernetes_ready": true,
      "docker_requirements": "Official MCP fetch server (lightweight Python)"
    },
    "mcp_generator": {
      "name": "mcp_generator",
      "role": "MCP Server Generator",
      "goal": "Generate production-ready MCP servers from API specifications and documentation",
      "backstory": "You are an expert TypeScript developer specializing in the Model Context Protocol. You generate clean, well-documented MCP servers that follow MC-PEA standards and integrate seamlessly with authentication systems. You ensure all generated servers are production-ready and follow best practices.",
      "mcp_dependencies": [],
      "fallback_description": "Self-contained generator with no external MCP dependencies",
      "deployment_friendly": true,
      "kubernetes_ready": true,
      "docker_requirements": "Node.js runtime for TypeScript compilation"
    },
    "api_analyzer": {
      "name": "api_analyzer",
      "role": "API Documentation Analyzer",
      "goal": "Analyze and understand API documentation to extract specifications and patterns",
      "backstory": "You are an expert at analyzing API documentation from various sources. You understand REST, GraphQL, gRPC, and other API patterns. You extract comprehensive specifications that can be used to generate MCP servers, identifying authentication methods, endpoints, parameters, and data structures.",
      "mcp_dependencies": [
        {
          "name": "fetch",
          "package": "mcp-server-fetch",
          "type": "official",
          "repository": "https://github.com/modelcontextprotocol/servers/tree/main/src/fetch",
          "description": "Official MCP fetch server for web content retrieval",
          "tools": ["fetch"],
          "installation": {
            "uv": "uvx mcp-server-fetch",
            "pip": "pip install mcp-server-fetch && python -m mcp_server_fetch",
            "docker": "docker run -i --rm mcp/fetch"
          },
          "lightweight": true,
          "deployment_friendly": true,
          "kubernetes_ready": true
        }
      ],
      "fallback_description": "Can analyze local documentation files when MCP fetch server unavailable",
      "deployment_friendly": true,
      "kubernetes_ready": true,
      "docker_requirements": "Official MCP fetch server (lightweight Python)"
    },
    "validator": {
      "name": "validator",
      "role": "MCP Server Validator",
      "goal": "Validate generated MCP servers for compliance, functionality, and best practices",
      "backstory": "You are a quality assurance expert specializing in MCP server validation. You ensure all generated servers comply with MCP protocol standards, follow MC-PEA guidelines, and are production-ready. You perform comprehensive testing including protocol compliance, authentication flows, and error handling.",
      "mcp_dependencies": [],
      "fallback_description": "Self-contained validator with comprehensive testing capabilities",
      "deployment_friendly": true,
      "kubernetes_ready": true,
      "docker_requirements": "Node.js runtime for MCP SDK client testing"
    },
    "orchestrator": {
      "name": "orchestrator",
      "role": "Workflow Orchestrator",
      "goal": "Coordinate multi-agent workflows for end-to-end MCP server generation",
      "backstory": "You are a workflow orchestration expert who coordinates the activities of multiple specialized agents. You manage the complete lifecycle from API discovery through MCP server generation, validation, and deployment. You ensure smooth handoffs between agents and maintain state throughout complex workflows.",
      "mcp_dependencies": [],
      "fallback_description": "Pure orchestration logic with no external MCP dependencies",
      "deployment_friendly": true,
      "kubernetes_ready": true,
      "docker_requirements": "Python runtime for CrewAI orchestration"
    },
    "github_agent": {
      "name": "github_agent",
      "role": "GitHub Operations Agent",
      "goal": "Manage GitHub repositories, issues, pull requests, and automations for MCP server projects",
      "backstory": "You are an expert GitHub automation specialist with deep knowledge of Git workflows, repository management, and GitHub APIs. You specialize in creating and managing repositories for MCP servers, handling issue tracking, pull request workflows, and GitHub Actions automation.",
      "mcp_dependencies": [
        {
          "name": "github",
          "package": "github-mcp-server",
          "type": "official",
          "repository": "https://github.com/github/github-mcp-server",
          "description": "Official GitHub MCP server for repository operations, issues, and pull requests",
          "tools": ["repos", "issues", "pull_requests", "actions", "context"],
          "installation": {
            "npm": "npm install -g github-mcp-server",
            "docker": "docker run -i --rm github/mcp-server"
          },
          "auth_required": true,
          "auth_method": "github_token",
          "deployment_friendly": true,
          "kubernetes_ready": true
        }
      ],
      "fallback_description": "Can operate with reduced functionality using GitHub REST API directly",
      "deployment_friendly": true,
      "kubernetes_ready": true,
      "docker_requirements": "Official GitHub MCP server with GitHub token authentication"
    }
  },
  "global_settings": {
    "anthropic_model": "claude-sonnet-4-20250514",
    "max_iterations": 5,
    "timeout_seconds": 300,
    "logging_level": "INFO",
    "fallback_enabled": true,
    "kubernetes_optimization": true,
    "deployment_mode": "production"
  },
  "mcp_standards": {
    "protocol_version": "2024-11-05",
    "sdk_version": "latest",
    "template_repository": "https://github.com/modelcontextprotocol/typescript-sdk",
    "validation_required": true,
    "security_standards": {
      "authentication": "required",
      "input_validation": "strict",
      "error_handling": "secure"
    }
  },
  "deployment_targets": {
    "kubernetes": {
      "enabled": true,
      "resource_limits": {
        "memory": "512Mi",
        "cpu": "0.5"
      },
      "health_checks": true
    },
    "docker": {
      "enabled": true,
      "base_image": "node:18-alpine",
      "multi_stage": true
    },
    "serverless": {
      "enabled": false,
      "provider": "aws-lambda"
    }
  }
}
