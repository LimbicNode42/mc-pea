#!/usr/bin/env python3
"""
Test script for MCP API Integration Agent and Task
"""

import os
import sys
import json
from pathlib import Path

# Add the ai-agents directory to the Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from agents_workers.mcp_api_integrator_agent import MCPAPIIntegratorAgent
from tasks.mcp_api_integration_task import MCPAPIIntegrationTask
from crewai import Crew, Process

def test_mcp_api_integration():
    """Test the MCP API integration system with sample data."""
    
    print("üß™ Testing MCP API Integration System")
    print("=" * 50)
    
    # Sample extraction results (simulating what would come from API extraction)
    sample_extraction_results = [
        {
            "chunk_id": 1,
            "endpoints_processed": 3,
            "data": {
                "api_usage_examples": [
                    {
                        "endpoint": "/api/users",
                        "method": "GET",
                        "description": "Get list of users",
                        "parameters": {
                            "page": "integer",
                            "limit": "integer"
                        },
                        "response": {
                            "users": "array",
                            "total": "integer"
                        },
                        "example_code": "const users = await fetch('/api/users?page=1&limit=10')"
                    },
                    {
                        "endpoint": "/api/users/{id}",
                        "method": "GET", 
                        "description": "Get specific user by ID",
                        "parameters": {
                            "id": "string"
                        },
                        "response": {
                            "user": "object"
                        },
                        "example_code": "const user = await fetch('/api/users/123')"
                    }
                ]
            }
        },
        {
            "chunk_id": 2,
            "endpoints_processed": 2,
            "data": {
                "api_usage_examples": [
                    {
                        "endpoint": "/api/posts",
                        "method": "POST",
                        "description": "Create a new post",
                        "parameters": {
                            "title": "string",
                            "content": "string",
                            "author_id": "string"
                        },
                        "response": {
                            "post": "object",
                            "id": "string"
                        },
                        "example_code": "const post = await fetch('/api/posts', { method: 'POST', body: JSON.stringify({title, content, author_id}) })"
                    }
                ]
            }
        }
    ]
    
    # Sample MCP server path (would normally be generated by MCP Base Generator)
    sample_mcp_server_path = "/tmp/test-mcp-server"
    
    # Create test context
    integration_context = {
        "extraction_results": sample_extraction_results,
        "mcp_server_path": sample_mcp_server_path,
        "server_name": "test-api-server",
        "website_url": "https://api.example.com/docs"
    }
    
    try:
        print("üîß Creating MCP API Integrator Agent...")
        integrator_agent = MCPAPIIntegratorAgent()
        print(f"‚úÖ Agent created: {integrator_agent.role}")
        
        print("\nüìã Creating MCP API Integration Task...")
        integration_task = MCPAPIIntegrationTask(context=integration_context)
        integration_task.agent = integrator_agent
        print(f"‚úÖ Task created: {integration_task.description[:100]}...")
        
        print("\nüë• Creating Integration Crew...")
        integration_crew = Crew(
            agents=[integrator_agent],
            tasks=[integration_task],
            process=Process.sequential,
            verbose=True
        )
        print("‚úÖ Crew created successfully")
        
        print("\nüöÄ Executing Integration Crew...")
        print("Note: This will attempt to analyze the sample data and generate integration results")
        
        # Execute the crew
        result = integration_crew.kickoff()
        
        print("\nüìä Integration Results:")
        print("-" * 30)
        
        # Parse and display results
        if hasattr(result, 'json_dict'):
            result_data = result.json_dict
        elif isinstance(result, dict):
            result_data = result
        else:
            try:
                result_data = json.loads(str(result))
            except:
                result_data = {"raw_result": str(result)}
        
        if isinstance(result_data, dict):
            for key, value in result_data.items():
                if isinstance(value, (list, dict)):
                    print(f"{key}: {json.dumps(value, indent=2)}")
                else:
                    print(f"{key}: {value}")
        else:
            print(f"Result: {result_data}")
        
        print("\n‚úÖ Test completed successfully!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Test failed with error: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_mcp_api_integration()
    sys.exit(0 if success else 1)
