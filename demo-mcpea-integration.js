#!/usr/bin/env node
/**
 * MC-PEA Integration Example using locally built GitHub MCP server
 */

const { GitHubMCPTester } = require('./test-github-tools');

class MCPeaGitHubIntegration extends GitHubMCPTester {
  
  async createDeploymentIssue(serviceName, serviceConfig) {
    console.log(`\n🚀 Creating deployment tracking issue for ${serviceName}...`);
    
    const issueBody = `
## Service Deployment: ${serviceName}

**Configuration:**
\`\`\`json
${JSON.stringify(serviceConfig, null, 2)}
\`\`\`

## Deployment Checklist
- [ ] Service configuration validated
- [ ] Dependencies resolved
- [ ] Health check endpoint configured
- [ ] Service started successfully
- [ ] Integration tests passed
- [ ] Monitoring configured

## Status Updates
This issue will be updated automatically by mc-pea orchestrator.

---
*Auto-generated by mc-pea orchestrator at ${new Date().toISOString()}*
    `;

    try {
      const response = await this.sendRequest('tools/call', {
        name: 'create_issue',
        arguments: {
          owner: 'LimbicNode42',
          repo: 'mc-pea',
          title: `🚀 Deploy ${serviceName} service`,
          body: issueBody,
          labels: ['deployment', 'microservice', serviceName, 'automated']
        }
      });

      if (response.result?.content?.[0]?.text) {
        const issue = JSON.parse(response.result.content[0].text);
        console.log(`✅ Created issue #${issue.number}: ${issue.title}`);
        console.log(`   URL: ${issue.html_url}`);
        return issue;
      }
    } catch (error) {
      console.log(`❌ Failed to create issue: ${error.message}`);
    }
  }

  async updateServiceStatus(issueNumber, status, message) {
    console.log(`\n📊 Updating service status to: ${status}`);
    
    const statusEmoji = {
      'deploying': '🔄',
      'running': '✅',
      'failed': '❌',
      'stopping': '⏹️',
      'stopped': '🔴'
    };

    const comment = `
${statusEmoji[status]} **Status Update: ${status.toUpperCase()}**

${message ? `**Details**: ${message}` : ''}

**Timestamp**: ${new Date().toISOString()}  
**Updated by**: mc-pea orchestrator
    `;

    try {
      const response = await this.sendRequest('tools/call', {
        name: 'add_issue_comment',
        arguments: {
          owner: 'LimbicNode42',
          repo: 'mc-pea',
          issue_number: issueNumber,
          body: comment
        }
      });

      if (response.result?.content?.[0]?.text) {
        const commentData = JSON.parse(response.result.content[0].text);
        console.log(`✅ Added status comment to issue #${issueNumber}`);
        console.log(`   Comment ID: ${commentData.id}`);
      }
    } catch (error) {
      console.log(`❌ Failed to update status: ${error.message}`);
    }
  }

  async demonstrateOrchestration() {
    console.log('\n🎭 MC-PEA GitHub Integration Demo');
    console.log('=' .repeat(50));

    await this.startServer();

    // 1. Get user context
    console.log('\n📋 Step 1: Getting user context...');
    await this.testGetMe();

    // 2. Check existing repository
    console.log('\n📋 Step 2: Checking mc-pea repository...');
    await this.testSearchRepositories();

    // 3. Create a deployment issue
    console.log('\n📋 Step 3: Creating deployment tracking issue...');
    const serviceConfig = {
      name: 'user-service',
      port: 3001,
      environment: 'development',
      dependencies: ['postgres', 'redis'],
      healthCheck: '/health',
      version: '1.0.0'
    };

    const issue = await this.createDeploymentIssue('user-service', serviceConfig);

    if (issue) {
      // 4. Simulate deployment lifecycle
      console.log('\n📋 Step 4: Simulating deployment lifecycle...');
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      await this.updateServiceStatus(issue.number, 'deploying', 'Starting service container...');
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      await this.updateServiceStatus(issue.number, 'running', 'Service started successfully on port 3001. Health check passing.');
    }

    // 5. Check notifications
    console.log('\n📋 Step 5: Checking notifications...');
    await this.testListNotifications();

    console.log('\n' + '='.repeat(50));
    console.log('🎉 MC-PEA GitHub Integration Demo Complete!');
    console.log('\nThis demonstrates how mc-pea can:');
    console.log('  ✅ Use GitHub issues for deployment tracking');
    console.log('  ✅ Provide real-time status updates');
    console.log('  ✅ Maintain audit trails for services');
    console.log('  ✅ Enable team collaboration via GitHub');

    if (this.server) {
      this.server.kill();
    }
  }
}

// Run demo if this file is executed directly
if (require.main === module) {
  const integration = new MCPeaGitHubIntegration();
  integration.demonstrateOrchestration().catch(console.error);
}

module.exports = { MCPeaGitHubIntegration };
